<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Crushing Pennies</title><link href="http://danielnaab.github.io/" rel="alternate"></link><link href="http://danielnaab.github.io/feeds/daniel-naab.atom.xml" rel="self"></link><id>http://danielnaab.github.io/</id><updated>2014-11-06T18:45:00-06:00</updated><entry><title>A Static Site Generator With Gulp, Prose.io, and Travis CI</title><link href="http://danielnaab.github.io/a-static-site-generator-with-gulp-proseio-and-travis-ci.html" rel="alternate"></link><updated>2014-11-06T18:45:00-06:00</updated><author><name>Daniel Naab</name></author><id>tag:danielnaab.github.io,2014-11-06:a-static-site-generator-with-gulp-proseio-and-travis-ci.html</id><summary type="html">&lt;p&gt;As I mentioned in my &lt;a href="http://danielnaab.github.io/django-project-blueprints-step-1.html"&gt;introductory post&lt;/a&gt;,
this is a static site generated with &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;.
Now, for a new project for Lynn, a dog-trainer friend - who&amp;#8217;s been kind enough
to trade her dog-whispering services for design and web work - I wanted to
create another generated static&amp;nbsp;site.&lt;/p&gt;
&lt;p&gt;The benefits are&amp;nbsp;manifest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fast load&amp;nbsp;times.&lt;/li&gt;
&lt;li&gt;Free hosting with Github&amp;nbsp;Pages.&lt;/li&gt;
&lt;li&gt;A simple deployment stack that won&amp;#8217;t go&amp;nbsp;down.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, I need this site to be easy for Lynn to edit. She needs blog-like
features, but also needs to easily be able to add new testimonials from
customers, add new images, change her class schedule and service pricing,
update her contact information, etc. Editing a Github repository, rebuilding,
and pushing to the &lt;code&gt;gh-pages&lt;/code&gt; branch is out of the&amp;nbsp;question.&lt;/p&gt;
&lt;p&gt;So how does one create a &lt;span class="caps"&gt;CMS&lt;/span&gt;-like experience for a generated static site?
&lt;a href="http://prose.io"&gt;Prose.io&lt;/a&gt;! With &lt;a href="http://prose.io"&gt;prose.io&lt;/a&gt;, we can edit
Markdown files in a friendly web interface, auto-commit and push to Github.
Then, with a Travis-&lt;span class="caps"&gt;CI&lt;/span&gt; job, the site may be auto-rebuilt and pushed to Github
Pages. Even better, we can hide the non-content sections of the repository to
avoid confusion. Awesomeness! Read more about this strategy
&lt;a href="http://www.developmentseed.org/blog/2012/june/25/prose-a-content-editor-for-github/"&gt;here&lt;/a&gt;
and &lt;a href="http://www.developmentseed.org/blog/2012/07/27/build-cms-free-websites/"&gt;here&lt;/a&gt;.
There are also &lt;a href="https://www.google.com/search?q=prose.io%20travis%20ci"&gt;several sources&lt;/a&gt;
for ideas on using &lt;a href="http://travis-ci.org"&gt;Travis &lt;span class="caps"&gt;CI&lt;/span&gt;&lt;/a&gt; with &lt;a href="http://prose.io"&gt;prose.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One more problem, though: all the framework-y static site generators are
heavily geared toward blogs&amp;#8230; specifically, blogs for technies. It is painful
to bend a blog data model to an arbitrary content type, much less have many
different data models that are all organized and rendered&amp;nbsp;differently.&lt;/p&gt;
&lt;p&gt;This is where &lt;a href="http://gulpjs.com/"&gt;gulp&lt;/a&gt; comes in. After some consideration, I
realized that gulp, which I have been enjoying using for client work and a
personal project, would be a perfect fit. It provides a simple way to do
processing on asset pipelines, which is exactly what a static site generator
does. In addition, unlike most generators out there, I would have total control
over the process and wouldn&amp;#8217;t feel like I was working with a
round-hole-square-peg blackbox. I could easily use
&lt;a href="http://sass-lang.com/"&gt;&lt;span class="caps"&gt;SASS&lt;/span&gt;&lt;/a&gt;, &lt;a href="https://www.npmjs.org/"&gt;npm&lt;/a&gt; with
&lt;a href="http://browserify.org/"&gt;Browserify&lt;/a&gt;, whatever
&lt;a href="http://paularmstrong.github.io/swig/"&gt;template language&lt;/a&gt; I want, etc.
Plus, I could organize the project structure in the most sensible manner for
this site and fully understand how the build process&amp;nbsp;works.&lt;/p&gt;
&lt;p&gt;Fortunately, I wasn&amp;#8217;t the only one who considered this possibility:
Sean Farrell &lt;a href="http://www.rioki.org/2014/06/09/jekyll-to-gulp.html"&gt;shared&lt;/a&gt; his
experiences creating such a pipeline, and I was able to steal some of his
ideas. Specifically, the ideas Sean outlined that were useful to me&amp;nbsp;were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;a href="https://www.npmjs.org/package/gulp-front-matter"&gt;gulp-front-matter&lt;/a&gt; to
parse &lt;span class="caps"&gt;YAML&lt;/span&gt; &amp;#8220;front matter&amp;#8221; from the content&amp;nbsp;documents.&lt;/li&gt;
&lt;li&gt;His method of iterating over content documents and applying front-mater and
processing to each&amp;nbsp;one.&lt;/li&gt;
&lt;li&gt;Also, I decided to follow his lead and use
&lt;a href="http://paularmstrong.github.io/swig/"&gt;&lt;span class="caps"&gt;SWIG&lt;/span&gt;&lt;/a&gt; for &lt;span class="caps"&gt;HTML&lt;/span&gt; templating, which was a
pretty natural choice for me due to its similarity to Django and&amp;nbsp;Jinga2.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Beyond that, I wanted my own organization and&amp;nbsp;workflow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;SASS&lt;/span&gt; for&amp;nbsp;styling&lt;/li&gt;
&lt;li&gt;CommonJS modules with&amp;nbsp;Browserify&lt;/li&gt;
&lt;li&gt;My preferred project&amp;nbsp;layout&lt;/li&gt;
&lt;li&gt;Travis &lt;span class="caps"&gt;CI&lt;/span&gt;&amp;nbsp;deployment&lt;/li&gt;
&lt;li&gt;Prose.io&amp;nbsp;configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Getting&amp;nbsp;Started&lt;/h3&gt;
&lt;p&gt;If you want to follow along with the codebase, you may do so
&lt;a href="https://github.com/danielnaab/wunderdog/"&gt;here&lt;/a&gt;. The live site is
&lt;a href="http://blog.crushingpennies.com/wunderdog/"&gt;here&lt;/a&gt; - be generous, the design
work is&amp;nbsp;pending!&lt;/p&gt;
&lt;p&gt;In the following sections, I&amp;#8217;ll skip over some details of the build process and
just focus on the big things that tie things&amp;nbsp;together.&lt;/p&gt;
&lt;p&gt;The project structure looks like&amp;nbsp;this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;assets/&lt;ul&gt;
&lt;li&gt;scripts/&lt;/li&gt;
&lt;li&gt;styles/&lt;/li&gt;
&lt;li&gt;templates/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;content/&lt;ul&gt;
&lt;li&gt;pages/&lt;/li&gt;
&lt;li&gt;posts/&lt;/li&gt;
&lt;li&gt;testimonials/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;_prose.yml&lt;/li&gt;
&lt;li&gt;gulpfile.js&lt;/li&gt;
&lt;li&gt;package.json&lt;/li&gt;
&lt;li&gt;travis.yml&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Compiling a Content Type:&amp;nbsp;Testimonials&lt;/h3&gt;
&lt;p&gt;As you can see above, there are three content types in this project: pages,
posts, and testimonials. Pages are just one-off things, like an About or
Contact page. Posts correspond to blog posts, and every testimonial gets
rendered to one testimonials page. Let&amp;#8217;s take a look at how testimonials are
processed by our &lt;a href="https://github.com/danielnaab/wunderdog/blob/master/gulpfile.js"&gt;&lt;code&gt;gulpfile.js&lt;/code&gt;&lt;/a&gt;. This code is largely borrowed from
&lt;a href="http://www.rioki.org/2014/06/09/jekyll-to-gulp.html"&gt;Sean Farrell&lt;/a&gt;, and the
same format is used for blog&amp;nbsp;posts:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;frontMatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gulp-front-matter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;marked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gulp-marked&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;testimonials&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content/testimonials/*.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;frontMatter&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marked&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="c1"&gt;// Collect all the testimonials and place them on the site object.&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;testimonials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[]&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;through&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;testimonials&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;testimonials&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;testimonials.length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;testimonials&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="nx"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;testimonials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;testimonials&lt;/span&gt;
                &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;})())&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First, we iterate over all the testimonials, extract the front-matter, and
compile the Markdown to &lt;span class="caps"&gt;HTML&lt;/span&gt;. Next, we create an array of testimonials, sorted
by author name, and store it on the global &lt;code&gt;site&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;Notice that we didn&amp;#8217;t output anything here - we just collected data that we can
render later. We will later pass
the &lt;code&gt;site&lt;/code&gt; object into our templates. To see how we render them, have a gander
at the source for the
&lt;a href="https://github.com/danielnaab/wunderdog/blob/master/content/pages/testimonials.html"&gt;testimonials page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now let&amp;#8217;s take a look at how the
&lt;a href="https://github.com/danielnaab/wunderdog/tree/master/content/pages"&gt;&lt;code&gt;pages&lt;/code&gt;&lt;/a&gt;
are&amp;nbsp;rendered:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;frontMatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gulp-front-matter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;marked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gulp-marked&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;merge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;merge-stream&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cleanpages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;testimonials&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content/pages/*.html&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;frontMatter&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;through&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;site&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;site&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tpl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;swig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compileFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tpl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}))&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content/pages/*.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;frontMatter&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marked&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;applyTemplate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;assets/templates/page.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;extname&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulpif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;htmlmin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="c1"&gt;// This option seems logical, but it breaks gulp-rev-all&lt;/span&gt;
            &lt;span class="nx"&gt;removeAttributeQuotes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

            &lt;span class="nx"&gt;removeComments&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;collapseWhitespace&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;removeRedundantAttributes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;removeStyleLinkTypeAttributes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;minifyJS&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;minifyCSS&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;minifyURLs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;})))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that we have two separate asset pipelines which are merged into one gulp
stream with the &lt;a href="https://www.npmjs.org/package/merge-stream"&gt;merge-stream&lt;/a&gt;
module. Both pipelines, for &lt;span class="caps"&gt;HTML&lt;/span&gt; and Markdown, extract the front-matter from
each document. All Markdown documents use the &lt;code&gt;assets/templates/page.html&lt;/code&gt;
template, but the &lt;span class="caps"&gt;HTML&lt;/span&gt; documents are expected to explicitly extend from a
template. The &lt;span class="caps"&gt;HTML&lt;/span&gt; is rendered using the &lt;code&gt;applyTemplate&lt;/code&gt;, also borrowed from
Sean Farrell. Next, the use of &lt;code&gt;merge-stream&lt;/code&gt; allows us to apply common
processing to both pipelines - specifically, &lt;span class="caps"&gt;HTML&lt;/span&gt; minification and output to
the &lt;code&gt;dist&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;We can then follow the same process for other asset pipelines. For instance, we
could populate a &lt;em&gt;services page&lt;/em&gt; with a list of items with corresponding
prices, availability information, etc, all populated with front-matter data and
Markdown content. Who needs a&amp;nbsp;database?&lt;/p&gt;
&lt;h3&gt;Deployment&lt;/h3&gt;
&lt;p&gt;Skipping over the &lt;code&gt;dist&lt;/code&gt; task that compiles the entire project, let&amp;#8217;s take a
look at the &lt;code&gt;deploy&lt;/code&gt; task:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;deploy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gulp-gh-pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;deploy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dist&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./dist/**/*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://www.npmjs.org/package/gulp-gh-pages"&gt;&lt;code&gt;gulp-gp-pages&lt;/code&gt;&lt;/a&gt; makes this
pretty simple; we can use the defaults, but the documentation allows us to
configure the git remote and origin, if&amp;nbsp;necessary.&lt;/p&gt;
&lt;h3&gt;Travis &lt;span class="caps"&gt;CI&lt;/span&gt;&amp;nbsp;Configuration&lt;/h3&gt;
&lt;p&gt;Now that we have a deploy process, we want to automate it. We should be
pushing a built site every time a commit is pushed upstream. Here&amp;#8217;s the
&lt;code&gt;.travis.yml&lt;/code&gt; that handles that for&amp;nbsp;us:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;only&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;node_js&lt;/span&gt;
&lt;span class="n"&gt;node_js&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.10&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;npm&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;gulp&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;npm&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;span class="n"&gt;before_script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://${GH_TOKEN}@github.com/danielnaab/wunderdog.git&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;email&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;danielnaab@gmail.com&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Travis-CI&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;gulp&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;secure&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;jTbRauX2+9E9WbSI6pu4oXO3P60d3KriWQr7sD39JArrXFqs3ZpeT0gdycmE4OlYS/t1MY7yzKFw2MPeyIO2tl5zIBRLx77GZRwqkKi0Y4Uu5nRNkOBiPsrVD7Iq5gLuknQGbLCHf2p+1MmtQbsuEVTSkV/FWzCxk2j0nRUm2ng=&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Basically, we install our dependencies, set the origin with &lt;code&gt;https://&lt;/code&gt; rather
than &lt;code&gt;git://&lt;/code&gt; (because we&amp;#8217;re pushing), with an included Github auth token.
Then, we run the deploy&amp;nbsp;task.&lt;/p&gt;
&lt;p&gt;To set &lt;code&gt;GH_TOKEN&lt;/code&gt;, we first need a Github auth token. Github
&lt;a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use/"&gt;provides instructions&lt;/a&gt;
for how to do that. Next, we need to encrypt the token so it&amp;#8217;s not committed as
plain text for the world to read; we can use the
&lt;a href="https://rubygems.org/gems/travis"&gt;&lt;code&gt;travis&lt;/code&gt; command line tool&lt;/a&gt; for&amp;nbsp;that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;travis&lt;/span&gt;
&lt;span class="n"&gt;travis&lt;/span&gt; &lt;span class="n"&gt;encrypt&lt;/span&gt; &lt;span class="n"&gt;GH_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Github&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will output the &lt;code&gt;secure: XXXXX&lt;/code&gt; line seen above. Add it to your
&lt;code&gt;.travis.yml&lt;/code&gt;, and you&amp;#8217;re good to go! Commit, wait a few, and your site will
be&amp;nbsp;updated.&lt;/p&gt;
&lt;h3&gt;Prose.io&amp;nbsp;Configuration&lt;/h3&gt;
&lt;p&gt;Now, onto &lt;a href="https://rubygems.org/gems/travis"&gt;prose.io&lt;/a&gt;. It&amp;#8217;s easy enough to
log in to the site, and at this point, we may make edits and things will
&lt;em&gt;just work&lt;/em&gt;. Remember, though, we want the data-entry &lt;span class="caps"&gt;UI&lt;/span&gt; to be as easy as
possible and not include extraneous crud. We may use the
&lt;a href="https://github.com/prose/prose/wiki/Prose-Configuration"&gt;&lt;code&gt;_prose.yml&lt;/code&gt;&lt;/a&gt; to
defined the kind of interface prose.io should generate for&amp;nbsp;us:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;prose&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;rooturl&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;siteurl&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://blog.crushingpennies.com/wunderdog/&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;media&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;content/media&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;published&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Published&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Uncheck to make this post hidden.&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
          &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Title&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The blog post title&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Enter title&amp;quot;&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Publication Date&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The publication date for this post.&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Enter date in the form YYYY-MM-DD&amp;quot;&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;allowComments&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Allow Comments&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Allow users to comment with Disqus.&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
          &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;testimonials&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;published&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Published&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Uncheck to make this testimonial hidden.&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
          &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Author&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The name of the author of this testimonial.&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Enter author name&amp;quot;&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;authorLocation&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Author Location&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The location of the author of this testimonial.&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Enter author location&amp;quot;&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;authorUrl&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Author URL&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A web URL for this author, if available.&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Enter author URL&amp;quot;&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;signees&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Signees/signatories&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;If there is more than one author for this testimonial, enter them here.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;gulp&lt;/code&gt; + &lt;code&gt;prose.io&lt;/code&gt; + &lt;code&gt;Travis CI&lt;/code&gt; = awesome. I&amp;#8217;m pretty pleased with the gulp
asset workflow, in particular, and intend to follow these patterns for a couple
more content types and hopefully streamline the process a&amp;nbsp;bit.&lt;/p&gt;
&lt;p&gt;As this project is finished out with a finalized design and interactivity with
Javascript, I&amp;#8217;ll update this post with any new ideas. Anyone else out there
using gulp for static site&amp;nbsp;generation?&lt;/p&gt;</summary><category term="static-site"></category><category term="gulp"></category><category term="prose.io"></category><category term="travis-ci"></category><category term="browserify"></category><category term="sass"></category><category term="swig"></category></entry><entry><title>Django Project Blueprints: Step 1</title><link href="http://danielnaab.github.io/django-project-blueprints-step-1.html" rel="alternate"></link><updated>2014-07-29T18:45:00-05:00</updated><author><name>Daniel Naab</name></author><id>tag:danielnaab.github.io,2014-07-29:django-project-blueprints-step-1.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been using Django since 2006 and Python since 2000, but for many years
working with these great tools was only done on side projects. Slowly,
however, I found myself doing more and more projects, and, since last year,
working for myself primarily in the Python world. Working with these tools,
I&amp;#8217;ve had the pleasure of helping build several interesting and challenging
projects. Python and Django has always felt like the language and platform
most natural and productive to work with, so for me, it&amp;#8217;s my go-to combo for
many&amp;nbsp;problems.&lt;/p&gt;
&lt;p&gt;So when I heard from a friend and former colleague, &lt;a href="https://brandonftaylor.com/"&gt;Brandon Taylor&lt;/a&gt;, about
the possibility of collaborating with him on a &lt;a href="http://www.packtpub.com/"&gt;Packt Publishing&lt;/a&gt; title
focused on designing Django applications, I jumped at the chance. Packt has a
&amp;#8220;Blueprint&amp;#8221; series, for which Brandon has proposed and starting work on
&lt;em&gt;Django Project Blueprints&lt;/em&gt;. I&amp;#8217;ve joined him as co-author to write several of
the chapters and collaborate on the others. I&amp;#8217;m pretty excited to work with as
talented a developer/designer as Brandon on this project, and become a
&amp;#8220;published author&amp;#8221; in the&amp;nbsp;process.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Django Project Blueprints&lt;/em&gt; will outline the design of four projects, of
varying degrees of complexity and application stack. Each project will go
beyond the typical how-to book, requiring familiarity with the language and
framework, but describe useful patterns for creating non-trivial projects,
in a traditional step-by-step manner. In addition to assistance laying out
largish projects, &lt;em&gt;Django Project Blueprints&lt;/em&gt; touch on several&amp;nbsp;concepts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geo data with&amp;nbsp;GeoDjango&lt;/li&gt;
&lt;li&gt;Extracting &lt;span class="caps"&gt;EXIF&lt;/span&gt; data from&amp;nbsp;images&lt;/li&gt;
&lt;li&gt;Creating a RESTful api with&amp;nbsp;django-rest-framework&lt;/li&gt;
&lt;li&gt;Processing credit card&amp;nbsp;transactions&lt;/li&gt;
&lt;li&gt;Real-time client/server communication with&amp;nbsp;socket.io&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I plan on following up this post with updates on my progress and give my
perspective on what it&amp;#8217;s like to (without prior experience) write a technical
how-to&amp;nbsp;book.&lt;/p&gt;</summary><category term="django"></category><category term="python"></category><category term="packt"></category><category term="django-project-blueprints"></category></entry><entry><title>Hello, World!</title><link href="http://danielnaab.github.io/hello-world.html" rel="alternate"></link><updated>2014-07-26T16:04:00-05:00</updated><author><name>Daniel Naab</name></author><id>tag:danielnaab.github.io,2014-07-26:hello-world.html</id><summary type="html">&lt;p&gt;I decided to create a blog. It was built with the Python Pelican static site
generator and is hosted by Github Pages. &lt;em&gt;Nice&amp;nbsp;combo!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For the interested, the project is &lt;a href="https://github.com/danielnaab/danielnaab.github.io"&gt;available on Github&lt;/a&gt;. The &lt;code&gt;pelican&lt;/code&gt;
branch contains the source code, and the &lt;code&gt;master&lt;/code&gt; branch has the rendered
output. The general process&amp;nbsp;was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install dependencies into a&amp;nbsp;virtualenv:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkvirtualenv&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;fabric&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt; &lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;typogrify&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Create project&amp;nbsp;shell:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;quickstart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Update a few settings in &lt;code&gt;pelicanconf.py&lt;/code&gt; and &lt;code&gt;publishconf.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a theme. I based this off &lt;a href="https://github.com/getpelican/pelican-themes/tree/master/SoMA2"&gt;SoMA2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make github&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many tutorials on this process around the interwebs, but I am amazed
at the clean design and ease of use that Pelican provides. I highly recommend&amp;nbsp;it!&lt;/p&gt;</summary><category term="python"></category><category term="pelican"></category><category term="static-site"></category></entry></feed>